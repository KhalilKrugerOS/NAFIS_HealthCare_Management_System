openapi: 3.0.0
info:
  title: API Gestion Hospitalière Nafis
  description: API Gestion Hospitalière Nafis
  version: 1.0.0
servers:
  - url: http://localhost:8080
    description: Serveur de développement
  - url: https://api.hopital-nafis.com
    description: Serveur de production

tags:
  - name: Users
    description: Gestion des users
  - name: Patients
    description: Gestion des patients
  - name: Surveillance
    description: Surveillance en temps réel
  - name: Personnel
    description: Gestion du personnel
  - name: Rendez-vous
    description: Gestion des rendez-vous et des chambres

paths:
  /api/auth/signup:
      post:
        tags:
          - Users
        summary:  création des users selon leurs roles (admin, patient, personnel)
        requestBody:
          required: true
          content:
            application/json: 
              $ref: '#/components/schemas/SignupRequest'
              example:
                commonFields:
                  firstname: "John"
                  lastname: "Doe"
                  email: "johndoe@example.com"
                  password: "SecureP@ss123"
                  role: "USER"
                personnelSpecificFields:
                  type: "MEDECIN"
                  categorie: "TITULAIRE"
                  specialite: "CARDIOLOGIE"
                  service: "Cardiology Department"
                  matricule: "12345"
                  dateRecrutement: "2024-02-05"
                  statut: "PRESENT" 

  /api/auth/login:
    post:
      tags: 
        - Users
      summary: login des users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginDto'
              example:
              email: "johndoe@example.com"
              password: "SecureP@ss123"
              role: "PATIENT"

  /api/patients:
    get:
      tags:
        - Patients
      summary: Liste des patients
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: Liste des patients récupérée
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Patient'

  /api/patients/{id}:
    get:
      tags:
        - Patients
      summary: Détails d'un patient
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Détails du patient
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Patient'
  
  /api/patients/{id}/historique:
    post:
      tags:
        - Patients
      summary: Create medical history for a patient
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the patient
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMedicalHistoryDto'
      responses:
        '201':
          description: Medical history created successfully
        '400':
          description: Bad request, missing required fields or invalid data
        '404':
          description: Patient not found

    get:
      summary: Get medical history for a patient
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the patient
          schema:
            type: integer
      responses:
        '200':
          description: The patient's medical history
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MedicalHistory'
        '404':
          description: Patient not found

  /patients/{id}/historique/documents:
    get:
      summary: Get all documents for a patient's medical history
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the patient
          schema:
            type: integer
      responses:
        '200':
          description: List of documents
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Document'
        '404':
          description: Medical history not found for the patient

    post:
      summary: Add a new document to a patient's medical history
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the patient
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDocumentDto'
      responses:
        '201':
          description: Document added successfully
        '404':
          description: Patient not found

  /patients/{id}/historique/documents/{documentId}:
    put:
      summary: Update a document in a patient's medical history
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the patient
          schema:
            type: integer
        - name: documentId
          in: path
          required: true
          description: The ID of the document
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDocumentDto'
      responses:
        '200':
          description: Document updated successfully
        '404':
          description: Document or patient not found

    delete:
      summary: Remove a document from a patient's medical history
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the patient
          schema:
            type: integer
        - name: documentId
          in: path
          required: true
          description: The ID of the document
          schema:
            type: integer
      responses:
        '200':
          description: Document removed successfully
        '404':
          description: Document or patient not found

  /api/messaging/request:
    post:
      tags:
        - Messaging
      summary: Envoyer une demande de communication à un médecin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageRequest'
      responses:
        '201':
          description: Demande de communication créée
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageRequest'
        '400':
          description: Demande invalide

  /api/messaging/requests/{doctorId}:
    get:
      tags:
        - Messaging
      summary: Récupérer les demandes de communication pour un médecin
      parameters:
        - name: doctorId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Liste des demandes de communication
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MessageRequest'

  /api/messaging/requests/{requestId}/status:
    put:
      tags:
        - Messaging
      summary: Mettre à jour le statut d'une demande de communication
      parameters:
        - name: requestId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                statut:
                  type: string
                  enum: [ACCEPTE, REFUSE]
      responses:
        '200':
          description: Statut de la demande mis à jour

  /api/messaging/conversation/{Id}:
    get:
      tags:
        - Messaging
      summary: Récupérer les messages d'une conversation
      parameters:
        - name: Id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Liste des messages de la conversation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'

    post:
      tags:
        - Messaging
      summary: Envoyer un message dans une conversation
      parameters:
        - name: Id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Message'
      responses:
        '201':
          description: Message envoyé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'

  /api/surveillance/constantes/{patientId}:
    get:
      tags:
        - Surveillance
      summary: Constantes vitales en temps réel
      parameters:
        - name: patientId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Constantes vitales
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConstantesVitales'

  /api/personnel:
    get:
      tags:
        - Personnel
      summary: Liste du personnel
      responses:
        '200':
          description: Liste du personnel
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Personnel'

  /api/personnel/presence:
    post:
      tags:
        - Personnel
      summary: Marquer la présence d'un membre du personnel
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Presence'
      responses:
        '201':
          description: Présence enregistrée

  /api/personnel/{id}/presences:
    get:
      tags:
        - Personnel
      summary: Obtenir les statistiques de présence
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
        - name: debut
          in: query
          required: true
          schema:
            type: string
            format: date
        - name: fin
          in: query
          required: true
          schema:
            type: string
            format: date
      responses:
        '200':
          description: Statistiques de présence
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatistiquesPresence'

  /api/rendez-vous:
    post:
      tags:
        - Rendez-vous
      summary: Créer un rendez-vous
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Rendezvous'
      responses:
        '201':
          description: Rendez-vous créé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rendezvous'

  /api/chambres:
    get:
      tags:
        - Rendez-vous
      summary: État des chambres
      responses:
        '200':
          description: Liste des chambres
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Chambre'

components:
  schemas:
    LoginDto:
      type: object
      required:
        - email
        - password
        - role
      properties:
        email:
          type: string
          format: email
          example: user@example.com
          description: User email address
        password:
          type: string
          format: password
          minLength: 6
          pattern: "^(?=.*\\d)(?=.*[!@#$%^&*])(?=.*[a-zA-Z]).{6,}$"
          example: "Passw0rd!"
          description: |
            Password must contain at least 6 characters, including:
            - At least one letter
            - At least one number
            - At least one special character (!@#$%^&*)
        role:
          type: string
          enum:
            - ADMIN
            - PATIENT
            - PERSONNEL
          example: PATIENT
          description: User role

    CreateUserDto:
      type: object
      properties:
        firstname:
          type: string
          example: "John"
        lastname:
          type: string
          example: "Doe"
        email:
          type: string
          format: email
          example: "johndoe@example.com"
        password:
          type: string
          format: password
          minLength: 6
          example: "securePass123"
        role:
          type: string
          enum: ["ADMIN", "PATIENT", "PERSONNEL"] 
          example: "ADMIN"

    CreatePersonnelDto:
      type: object
      properties:
        type:
          type: string
          enum: [MEDECIN, INFIRMIER, AIDE_SOIGNANT, ADMINISTRATIF, TECHNICIEN]
          example: MEDECIN
        categorie:
          type: string
          enum: [TITULAIRE, CONTRACTUEL, VACATAIRE, STAGIAIRE, RESIDENT]
          example: TITULAIRE
        specialite:
          type: string
          enum: [CARDIOLOGIE, PEDIATRIE, NEUROLOGIE, URGENCES, CHIRURGIE, RADIOLOGIE, PSYCHIATRIE, GENERALISTE, AUTRE]
          example: CARDIOLOGIE
        service:
          type: string
          example: Cardiology Department
        matricule:
          type: string
          example: 12345
        dateRecrutement:
          type: string
          format: date
          example: "2024-01-15"
        statut:
          type: string
          enum: [PRESENT, ABSENT, CONGE, MISSION]
          example: PRESENT

    SignupRequest: 
      type: object
      required:
        properties:
          commonFields:
            $ref: "#/components/schemas/CreateUserDto"
          personnelSpecificFields:
            $ref: "#/components/schemas/CreatePersonnelDto"
    Admin:
      type: object
      required:
        - nom
        - prenom
        - dateNaissance
        - numeroSecu
        - adresse
        - telephone
      properties:
        id:
          type: integer
        nom:
          type: string
        prenom:
          type: string
        dateNaissance:
          type: string
          format: date
        numeroSecu:
          type: string
        adresse:
          type: string
        telephone:
          type: string
        email:
          type: string
        photoUrl:
          type: string

    Patient:
      type: object
      required:
        - nom
        - prenom
        - dateNaissance
        - numeroSecu
        - adresse
        - telephone
      properties:
        id:
          type: integer
        nom:
          type: string
        prenom:
          type: string
        dateNaissance:
          type: string
          format: date
        numeroSecu:
          type: string
        adresse:
          type: string
        telephone:
          type: string
        email:
          type: string
        photoUrl:
          type: string

    HistoriqueMedical:
      type: object
      properties:
        id:
          type: integer
        patientId:
          type: integer
        consultations:
          type: array
          items:
            $ref: '#/components/schemas/Consultation'
        documents:
          type: array
          items:
            $ref: '#/components/schemas/Document'      

    Consultation:
      type: object
      properties:
        id:
          type: integer
        date:
          type: string
          format: date-time
        medecin:
          type: string
        diagnostic:
          type: string
        prescriptions:
          type: array
          items:
            type: string   

    Personnel:
      type: object
      required:
        - nom
        - prenom
        - type
        - categorie
        - service
        - email
        - telephone
        - matricule
        - dateRecrutement
      properties:
        id:
          type: integer
        nom:
          type: string
        prenom:
          type: string
        type:
          type: string
          enum: [MEDECIN, INFIRMIER, AIDE_SOIGNANT, ADMINISTRATIF, TECHNICIEN]
        categorie:
          type: string
          enum: [TITULAIRE, CONTRACTUEL, VACATAIRE, STAGIAIRE, RESIDENT]
        specialite:
          type: string
          enum: [CARDIOLOGIE, PEDIATRIE, NEUROLOGIE, URGENCES, CHIRURGIE, RADIOLOGIE, PSYCHIATRIE, GENERALISTE, AUTRE]
        service:
          type: string
        email:
          type: string
        telephone:
          type: string
        matricule:
          type: string
        dateRecrutement:
          type: string
          format: date
        statut:
          type: string
          enum: [PRESENT, ABSENT, CONGE, MISSION]
    
    Presence:
      type: object
      required:
        - personnelId
        - date
        - statut
      properties:
        id:
          type: integer
        personnelId:
          type: integer
        date:
          type: string
          format: date
        statut:
          type: string
          enum: [PRESENT, ABSENT, CONGE, MISSION]
        commentaire:
          type: string

    StatistiquesPresence:
      type: object
      properties:
        personnelId:
          type: integer
        periode:
          type: object
          properties:
            debut:
              type: string
              format: date
            fin:
              type: string
              format: date
        statistiques:
          type: object
          properties:
            joursPresent:
              type: integer
            joursAbsent:
              type: integer
            joursConge:
              type: integer
            joursMission:
              type: integer
            tauxPresence:
              type: number
        details:
          type: object
          properties:
            conges:
              type: array
              items:
                $ref: '#/components/schemas/CongeDetail'
            absences:
              type: array
              items:
                $ref: '#/components/schemas/AbsenceDetail'
            missions:
              type: array
              items:
                $ref: '#/components/schemas/MissionDetail'

    CongeDetail:
      type: object
      properties:
        personnelId:
          type: integer
        debut:
          type: string
          format: date
        fin:
          type: string
          format: date
        type:
          type: string
          enum: [ANNUEL, MALADIE, FORMATION, AUTRE]
        motif:
          type: string

    AbsenceDetail:
      type: object
      properties:
        personnelId:
          type: integer
        date:
          type: string
          format: date
        justifie:
          type: boolean
        motif:
          type: string

    MissionDetail:
      type: object
      properties:
        personnelId:
          type: integer
        debut:
          type: string
          format: date
        fin:
          type: string
          format: date
        description:
          type: string
        lieu:
          type: string
    
    Document:
      type: object
      properties:
        id:
          type: integer
        type:
          type: string
          enum: [ORDONNANCE, RADIOGRAPHIE, ANALYSE, AUTRE]
        date:
          type: string
          format: date-time
        titre:
          type: string
        description:
          type: string
        url:
          type: string

    Chambre:
      type: object
      properties:
        numero:


          type: number
        type:
          type: string
          enum: [SIMPLE, DOUBLE, SOINS_INTENSIFS]
        statut:
          type: string
          enum: [LIBRE, OCCUPE, NETTOYAGE]
        patientIds:
          type: array
          items:
            type: integer

    ChambreHistorique:
      type: object
      properties:
        chambreId:
          type: string
        historique:
          type: array
          items:
            $ref: '#/components/schemas/ChambreLog'

    ChambreLog:
      type: object
      properties:
        date:
          type: string
          format: date-time
        statut:
          type: string
          enum: [LIBRE, OCCUPE, NETTOYAGE]
        patientId:
          type: integer
        message:
          type: string

    Rendezvous:
      type: object
      required:
        - patientId
        - medecinId
        - date
        - duree
        - motif
      properties:
        id:
          type: integer
        patientId:
          type: integer
        medecinId:
          type: integer
        date:
          type: string
          format: date-time
        duree:
          type: integer
          description: en minutes
        motif:
          type: string
        statut:
          type: string
          enum: [PLANIFIE, CONFIRME, ANNULE]
        notes:
          type: string
        rappelEnvoye:
          type: boolean

    ConstantesVitales:
      type: object
      properties:
        patientId:
          type: integer
        timestamp:
          type: string
          format: date-time
        temperature:
          type: number
        tensionArterielle:
          type: string
        frequenceCardiaque:
          type: integer
        saturationOxygene:
          type: integer
        alertes:
          type: array
          items:
            $ref: '#/components/schemas/Alerte'

    Alerte:
      type: object
      properties:
        id:
          type: integer
        type:
          type: string
          enum: [CRITIQUE, ATTENTION, INFO]
        message:
          type: string
        timestamp:
          type: string
          format: date-time
        acquittee:
          type: boolean
        acquitteePar:
          type: string

    MessageRequest:
      type: object
      required:
        - patientId
        - doctorId
      properties:
        id:
          type: integer
        patientId:
          type: integer
        doctorId:
          type: integer
        statut:
          type: string
          enum: [EN_ATTENTE, ACCEPTE, REFUSE]
        dateCreation:
          type: string
          format: date-time

    Conversation:
      type: object
      properties:
        id:
          type: integer
        patientId:
          type: integer
        doctorId:
          type: integer
        dateDebut:
          type: string
          format: date-time

    Message:
      type: object
      properties:
        id:
          type: integer
        conversationId:
          type: integer
        expediteurId:
          type: integer
        expediteurType:
          type: string
          enum: [PATIENT, MEDECIN]
        contenu:
          type: string
        dateEnvoi:
          type: string
          format: date-time
        seen:
          type: boolean
        pieceJointe:
          type: string
    CreateMedicalHistoryDto:
      type: object
      properties:
        consultations:
          type: array
          items:
            $ref: '#/components/schemas/CreateConsultationDto'
        documents:
          type: array
          items:
            $ref: '#/components/schemas/CreateDocumentDto'

    CreateConsultationDto:
      type: object
      properties:
        date:
          type: string
          format: date-time
        medecinId:
          type: integer
        diagnostic:
          type: string
        prescriptions:
          type: array
          items:
            type: string
        patientId:
          type: integer

    CreateDocumentDto:
      type: object
      properties:
        type:
          type: string
        date:
          type: string
          format: date-time
        titre:
          type: string
        description:
          type: string
        url:
          type: string
          format: uri

    UpdateDocumentDto:
      type: object
      properties:
        type:
          type: string
        date:
          type: string
          format: date-time
        titre:
          type: string
        description:
          type: string
        url:
          type: string
          format: uri

    MedicalHistory:
      type: object
      properties:
        id:
          type: integer
        patient:
          $ref: '#/components/schemas/Patient'
        consultations:
          type: array
          items:
            $ref: '#/components/schemas/Consultation'
        documents:
          type: array
          items:
            $ref: '#/components/schemas/Document'

    Patient:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        age:
          type: integer
        gender:
          type: string
        medicalHistory:
          $ref: '#/components/schemas/MedicalHistory'

    Consultation:
      type: object
      properties:
        id:
          type: integer
        date:
          type: string
          format: date-time
        diagnostic:
          type: string
        prescriptions:
          type: array
          items:
            type: string
        medecinId:
          type: integer
        patientId:
          type: integer

    Document:
      type: object
      properties:
        id:
          type: integer
        type:
          type: string
        date:
          type: string
          format: date-time
        titre:
          type: string
        description:
          type: string
        url:
          type: string
          format: uri

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - bearerAuth: []

